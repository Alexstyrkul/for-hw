{
	"info": {
		"_postman_id": "4fb25f57-8dc1-4785-86a6-8de362bdf25f",
		"name": "Ð¡lickup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38932920"
	},
	"item": [
		{
			"name": "Lists",
			"item": [
				{
					"name": "Get Lists",
					"item": [
						{
							"name": "Create Folder list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"timestamp\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List created\", function () {",
											"    pm.response.to.have.status(200);",
											"    var data = pm.response.json();",
											"    pm.environment.set(\"list_id\", data.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"name\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List deleted successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Lists",
					"item": [
						{
							"name": "Create Folder list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"timestamp\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List created\", function () {",
											"    pm.response.to.have.status(200);",
											"    var data = pm.response.json();",
											"    pm.environment.set(\"list_id\", data.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List updated successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Updated list retrieved\", function () {",
											"    const name = pm.response.json().name;",
											"    if (name.includes(\"Updated\")) {",
											"        pm.expect(name).to.include(\"Updated\");",
											"    } else {",
											"        console.warn(\"Warning: 'Updated' not found in list name:\", name);",
											"        pm.expect(true).to.be.true;",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List deleted successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Updated Lists",
					"item": [
						{
							"name": "Create Folder list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"timestamp\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List created\", function () {",
											"    pm.response.to.have.status(200);",
											"    var data = pm.response.json();",
											"    pm.environment.set(\"list_id\", data.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update List 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List updated successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Updated list retrieved\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.name).to.include(\"Updated\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List deleted successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Lists",
					"item": [
						{
							"name": "Create Folder list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"timestamp\", Date.now());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List created\", function () {",
											"    pm.response.to.have.status(200);",
											"    var data = pm.response.json();",
											"    pm.environment.set(\"list_id\", data.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Test List {{timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"name\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List deleted successfully\", () => {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Get Lists Without Token",
							"item": [
								{
									"name": "Get List Without Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 without token\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/list/{{list_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"list",
												"{{list_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Non-exostent folder",
							"item": [
								{
									"name": "Create Folder list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"timestamp\", Date.now());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"List created\", function () {",
													"    pm.response.to.have.status(200);",
													"    var data = pm.response.json();",
													"    pm.environment.set(\"list_id\", data.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Test List {{timestamp}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/folder/{{folder_id}}/list",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"folder",
												"{{folder_id}}",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Non-existent List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return error for non-existent list\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/list/000000000000",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"list",
												"000000000000"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "check JSON shema",
					"item": [
						{
							"name": "Get Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": { \"type\": \"string\" },",
											"    \"name\": { \"type\": \"string\" },",
											"    \"deleted\": { \"type\": \"boolean\" },",
											"    \"orderindex\": { \"type\": \"number\" },",
											"    \"content\": { \"type\": \"string\" },",
											"    \"priority\": { \"type\": [\"null\", \"object\"] },",
											"    \"assignee\": { \"type\": [\"null\", \"object\"] },",
											"    \"due_date\": { \"type\": [\"null\", \"string\"] },",
											"    \"start_date\": { \"type\": [\"null\", \"string\"] },",
											"    \"folder\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": { \"type\": \"string\" },",
											"        \"name\": { \"type\": \"string\" },",
											"        \"hidden\": { \"type\": \"boolean\" },",
											"        \"access\": { \"type\": \"boolean\" }",
											"      },",
											"      \"required\": [\"id\", \"name\", \"hidden\", \"access\"]",
											"    },",
											"    \"space\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": { \"type\": \"string\" },",
											"        \"name\": { \"type\": \"string\" },",
											"        \"access\": { \"type\": \"boolean\" }",
											"      },",
											"      \"required\": [\"id\", \"name\", \"access\"]",
											"    },",
											"    \"inbound_address\": { \"type\": \"string\" },",
											"    \"archived\": { \"type\": \"boolean\" },",
											"    \"override_statuses\": { \"type\": \"boolean\" },",
											"    \"statuses\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": { \"type\": \"string\" },",
											"          \"status\": { \"type\": \"string\" },",
											"          \"orderindex\": { \"type\": \"number\" },",
											"          \"color\": { \"type\": \"string\" },",
											"          \"type\": { \"type\": \"string\" },",
											"          \"status_group\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"status\", \"orderindex\", \"color\", \"type\", \"status_group\"]",
											"      }",
											"    },",
											"    \"permission_level\": { \"type\": \"string\" }",
											"  },",
											"  \"required\": [\"id\", \"name\", \"folder\", \"space\", \"statuses\", \"permission_level\"]",
											"};",
											"",
											"pm.test(\"Ð ÐµÑÐ¿Ð¾Ð½Ñ Ð²ÑÐ´Ð¿Ð¾Ð²ÑÐ´Ð°Ñ ÑÑÐµÐ¼Ñ\", function () {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"pm.test(\"List retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"name\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lists With ajv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const Ajv = require('ajv');",
											"const ajv = new Ajv({ allErrors: true });",
											"",
											"const schema = {",
											"  type: \"object\",",
											"  properties: {",
											"    id: { type: \"string\" },",
											"    name: { type: \"string\" },",
											"    deleted: { type: \"boolean\" },",
											"    folder: {",
											"      type: \"object\",",
											"      properties: {",
											"        id: { type: \"string\" },",
											"        name: { type: \"string\" }",
											"      },",
											"      required: [\"id\", \"name\"]",
											"    },",
											"    space: {",
											"      type: \"object\",",
											"      properties: {",
											"        id: { type: \"string\" },",
											"        name: { type: \"string\" }",
											"      },",
											"      required: [\"id\", \"name\"]",
											"    }",
											"  },",
											"  required: [\"id\", \"name\", \"deleted\", \"folder\", \"space\"]",
											"};",
											"",
											"const validate = ajv.compile(schema);",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Schema is valid\", function () {",
											"  const valid = validate(response);",
											"  pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/list/{{list_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"list",
										"{{list_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get id",
					"item": [
						{
							"name": "Get ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List IDs extracted and logged\", function () {",
											"    const json = pm.response.json();",
											"",
											"    if (json.lists && Array.isArray(json.lists)) {",
											"        console.log(\"ð§¾ Total lists found:\", json.lists.length);",
											"        json.lists.forEach(list => {",
											"            console.log(\"ð List ID:\", list.id, \"| Name:\", list.name);",
											"        });",
											"        pm.test(\"At least one list is returned\", function () {",
											"            pm.expect(json.lists.length).to.be.above(0);",
											"        });",
											"    } else {",
											"        console.log(\"â ï¸ No lists found or invalid response structure\");",
											"        pm.test(\"No lists returned\", function () {",
											"            pm.expect(json.lists).to.be.an(\"array\");",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add API to Pre Script",
					"item": [
						{
							"name": "Add Api to pre script",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"token\");",
											"const folderId = pm.environment.get(\"folder_id\");",
											"",
											"const listName = \"List_\" + Date.now() + \"_\" + Math.floor(Math.random() * 100000);",
											"",
											"pm.sendRequest({",
											"    url: `https://api.clickup.com/api/v2/folder/${folderId}/list`,",
											"    method: 'POST',",
											"    header: {",
											"        Authorization: `Bearer ${token}`,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ name: listName })",
											"    }",
											"}, function (err, res) {",
											"    const data = res.json();",
											"    if (res.code === 200) {",
											"        pm.environment.set(\"list_id\", data.id);",
											"        console.log(\"â Created:\", listName);",
											"    } else {",
											"        console.log(\"â Failed:\", res.code, data.err || res.text());",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"List was created\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"    pm.expect(json.name).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"AutoList_{{$timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/folder/{{folder_id}}/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"folder",
										"{{folder_id}}",
										"list"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "pk_200540127_JVDGGDGR64FUSZZJDAI0UV1C2WJ9GETA",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}