{
	"info": {
		"_postman_id": "08f6d4ac-f445-446d-8845-bd7e90f6f37a",
		"name": "List_tests_Home_work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44324847",
		"_collection_link": "https://ap-8220928.postman.co/workspace/AP's-Workspace~f97c720d-0a9d-451b-8cbf-b7d71270ba54/collection/44324847-08f6d4ac-f445-446d-8845-bd7e90f6f37a?action=share&source=collection_link&creator=44324847"
	},
	"item": [
		{
			"name": "Get Lists",
			"item": [
				{
					"name": "Create List A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"list_a_id\", jsonData.id);\r",
									"\r",
									"console.log(\"Записали list_a_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"List A - {{$timestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"list_b_id\", jsonData.id);\r",
									"\r",
									"console.log(\"Записали list_b_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"List B {{$timestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Перевірили 200 OK\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let listA = pm.environment.get(\"list_a_id\");\r",
									"let listB = pm.environment.get(\"list_b_id\");\r",
									"\r",
									"let allListIds = jsonData.lists.map(item => item.id);\r",
									"console.log(\"Отримали всі ID\", allListIds);\r",
									"\r",
									"pm.test(\"List A is in response\", () => {\r",
									"    pm.expect(allListIds).to.include(listA);\r",
									"}); \r",
									"console.log(\"Перевірили що List A присутній у відповіді\");\r",
									"\r",
									"pm.test(\"List B is in response\", () => {\r",
									"    pm.expect(allListIds).to.include(listB);\r",
									"});\r",
									"console.log(\"Перевірили що List B присутній у відповіді\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Успішне видалення List A\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/{{list_a_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_a_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Успішне видалення List B\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/{{list_b_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Lists WRONG Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 401 - неправильна авторизація\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"console.log(\"Отримали 401 — токен неправильний\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "pk_188602640_JUSTARANDOMSOMETHING",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create List",
			"item": [
				{
					"name": "Create List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.environment.set(\"list_id\", json.id);\r",
									"\r",
									"console.log(\"Збережено ID створеного списку:\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Created List {{$timestamp}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET List from ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200, list з таким ID існує\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Список успішно видалено\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сервер повертає 400 — name є обов'язковим\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"console.log(\"API не дозволяє створити список без поля 'name'\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get List",
			"item": [
				{
					"name": "Create List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.environment.set(\"list_id\", json.id);\r",
									"\r",
									"console.log(\"Збережено list_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"List for GET {{$timestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.test(\"The list has a name\", () => {\r",
									"    pm.expect(json.name).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"console.log(\"Отримано список з ім'ям\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список видалено\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Список видалено\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET an already deleted list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сервер повертає 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"console.log(\"Отримано 403 при запиті до видаленого списку\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update List",
			"item": [
				{
					"name": "Create List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список створено\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.environment.set(\"list_id\", json.id);\r",
									"\r",
									"console.log(\"Збережено list_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"List for update {{$timestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список оновлено — статус 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"\r",
									"pm.test(\"У відповеді присутня стока с ім'ям\", () => {\r",
									"    pm.expect(json.name).to.include(\"Updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"У строки з ім'ям відповідна назва\", () => {\r",
									"    pm.expect(json.content).to.eql(\"Оновлено через PUT\");\r",
									"});\r",
									"\r",
									"console.log(\"✏️ Ім'я списку:\", json.name);\r",
									"console.log(\"📝 Контент списку:\", json.content);\r",
									"console.log(\"Все добре!\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Updated List {{$timestamp}}\",\r\n  \"content\": \"Оновлено через PUT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список видалено\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Список видалено після оновлення\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the nonexistent list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сервер повертає 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"console.log(\"Неможливо оновити список з невалідним або чужим ID\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Won't work\",\r\n  \"content\": \"blah blah blah\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"999999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete List",
			"item": [
				{
					"name": "Create List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список створено\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200\");\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.environment.set(\"list_id\", json.id);\r",
									"\r",
									"console.log(\"Збережено list_id для видалення\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"List to delete {{$timestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/folder/{{folder_id}}/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Список успішно видалено\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Перевірка на 200, cписок з таким ID існує та видалено\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/list/{{list_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the nonexistent list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сервер повертає 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"console.log(\"Неможливо видалити список з невалідним або чужим ID\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/list/999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"list",
								"999999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create List (test)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log('Перевірили чи приходить 200');\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"list_id\", jsonData.id);\r",
							"console.log('Витягуємо list_id у змінну');\r",
							"\r",
							"pm.test(\"List created successfully\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"console.log('Перевірили чи є у респонді list_id ');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test List {{$timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/folder/{{folder_id}}/list",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"folder",
						"{{folder_id}}",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update List (test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log('Перевірили чи приходить 200, Список оновлено!');\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Updated List contains ID\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"console.log('Перевірили чи є у респонді list_id після апдейту');\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Updated List {{$timestamp}}\",\r\n  \"content\": \"Edited from {{$randomIP}}... JK!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/list/{{list_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"list",
						"{{list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete List (test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Список успішно видалено!\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/list/{{list_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"list",
						"{{list_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}